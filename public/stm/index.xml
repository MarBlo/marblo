<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stm on mb`s</title>
    <link>/stm/</link>
    <description>Recent content in Stm on mb`s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/stm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to add interactive plots to a Blog post</title>
      <link>/stm/how-to-add-interactive-plots-to-a-blog-post/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/stm/how-to-add-interactive-plots-to-a-blog-post/</guid>
      <description>Einiges gelernt zu Responsiveness und plot_ly Für den zweiten Post wollte ich einige interacktive Elemente wie zum Beispiel DT::dataframe() oder plot_ly bzw ggplotlyeinsetzen, und bin dabei auf einige Überraschungen gestoßen - habe aber auch extrem viel gelernt.
Ausgangspunkt ist die phantastische Seite von Alison Presman Hills. Die Seite, aif der es um htmlwidgets geht, versuche ich im Folgenden nachzubauen.</description>
    </item>
    
    <item>
      <title>Rolling Bar Chart Race with gganimate</title>
      <link>/stm/rolling-bar-chart-race-with-gganimate/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/stm/rolling-bar-chart-race-with-gganimate/</guid>
      <description>Rolling Bar Chart Race Diese Art der dynamischen Darstellung schien mir gut geeignet zu sein, um die Veränderungen unter den Topx im Laufe einer Saison darzustellen. Inspiration und gute Hinweise habe ich über die beiden Seiten emilykuehler und towardsdatascience bekommen.
Die Dynamik soll dadurch entstehen, dass die Topx sich wöchentlich ändern. Daraus entsteht die Notwendigkeit, für jede Woche für ALLE Fahrer ein neues Ranking zu erstellen und daraus die Topx zu filtern.</description>
    </item>
    
    <item>
      <title>Tagebuch</title>
      <link>/stm/tagebuch/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/stm/tagebuch/</guid>
      <description>Tagebuch über Hugo, Ideen und alles Mögliche SEO 1.1.2020:
Nachdem die Site seit 3 Tagen veröffentlicht ist, kann sie immer noch nicht über den bei google über site:marblo.netlify.com gefunden werden.
 Heute in public/robot.txt die folgende Zeile eingefügt: Sitemap: https://marblo.netlify.com/sitemap_location.xml was hier beschrieben wird Auch gelesen, dass es durchaus ein paar Tage dauern kann, bis die Seite von Google gecrawlt wurde Nächste Aktion wäre dann noch in config.toml den languangeCode zu ändern.</description>
    </item>
    
    <item>
      <title>Aufbau der Site</title>
      <link>/stm/aufbau-der-site/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/stm/aufbau-der-site/</guid>
      <description>Aufbau der Seite Der Umgang mit der website wird durch die eigentliche Datenanalyse, die außerhalb des blogdown-Projekts gemacht wird, sehr schnell sehr groß. Eine gewisse Dokumentation ist deshalb notwendig.
Die gesamte website ist direkt unter Dokumente mit dem Namen marblo.netlify.com zu finden. Hier findet man das eigentliche blogdown-Projekt, das marblo heißt, als auch die anderen R-Projekte, die zur Daten- und Plotaufbereitung dienen.
Das Blogdown Projekt Die einzelnen Datenprojekte Keines der hier aufgeführten Projekte sollte ohne genaue Prüfung gelöscht werden.</description>
    </item>
    
    <item>
      <title>Einrichten der Seite</title>
      <link>/stm/stm-1/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/stm/stm-1/</guid>
      <description>Einführung Nachdem ich schon im letzen Jahr mich mit dem Gedanken beschäftigt habe, eine Webseite aufzubauen, möchte ich das nun in diesem Winter (2019&amp;frasl;2020) umsetzen. In den letzten Tagen habe ich hauptsächlich bei gohugo nach einem passenden Theme gesucht. Es sollte folgende features haben:
 Schlicht und nicht zu fancy Soll gut aussehen und fürs Bloggen geeignet sein Auf der Website sollte eine Suche nach in Blogs verwendeten Begriffen möglich sein Sollte kompatibel mit R Markdown sein Die Einbindung von Präsentationen sollte möglich sein  Ich habe in eine ganze Reihe von Demos reingeschaut, von denen die meisten sehr gut aussehen.</description>
    </item>
    
    <item>
      <title></title>
      <link>/stm/2019-11-01-stm-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/stm/2019-11-01-stm-1/</guid>
      <description>Einrichten der Seite /*! jQuery v1.11.3 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */ !function(a,b){&#34;object&#34;==typeof module&amp;&amp;&#34;object&#34;==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error(&#34;jQuery requires a window with a document&#34;);return b(a)}:b(a)}(&#34;undefined&#34;!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=&#34;1.11.3&#34;,m=function(a,b){return new m.fn.init(a,b)},n=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,o=/^-ms-/,p=/-([\da-z])/gi,q=function(a,b){return b.toUpperCase()};m.fn=m.prototype={jquery:l,constructor:m,selector:&#34;&#34;,length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=m.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return m.each(this,a,b)},map:function(a){return this.pushStack(m.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0a?b:0);return this.pushStack(c=0&amp;&amp;bc?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},m.extend=m.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for(&#34;boolean&#34;==typeof g&amp;&amp;(j=g,g=arguments[h]||{},h++),&#34;object&#34;==typeof g||m.isFunction(g)||(g={}),h===i&amp;&amp;(g=this,h--);ih;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&amp;&amp;(j&amp;&amp;c&amp;&amp;(m.isPlainObject(c)||(b=m.isArray(c)))?(b?(b=!1,f=a&amp;&amp;m.isArray(a)?a:[]):f=a&amp;&amp;m.isPlainObject(a)?a:{},g[d]=m.extend(j,f,c)):void 0!==c&amp;&amp;(g[d]=c));return g},m.extend({expando:&#34;jQuery&#34;+(l+Math.random()).replace(/\D/g,&#34;&#34;),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return&#34;function&#34;===m.type(a)},isArray:Array.isArray||function(a){return&#34;array&#34;===m.type(a)},isWindow:function(a){return null!=a&amp;&amp;a==a.window},isNumeric:function(a){return!m.isArray(a)&amp;&amp;a-parseFloat(a)+1=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||&#34;object&#34;!==m.type(a)||a.nodeType||m.isWindow(a))return!1;try{if(a.constructor&amp;&amp;!j.call(a,&#34;constructor&#34;)&amp;&amp;!j.call(a.constructor.prototype,&#34;isPrototypeOf&#34;))return!1}catch(c){return!1}if(k.ownLast)for(b in a)return j.call(a,b);for(b in a);return void 0===b||j.call(a,b)},type:function(a){return null==a?a+&#34;&#34;:&#34;object&#34;==typeof a||&#34;function&#34;==typeof a?</description>
    </item>
    
  </channel>
</rss>